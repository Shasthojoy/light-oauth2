<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light OAuth2 - OAuth2 Serivces based on light-4j</title>
    <link>https://networknt.github.io/light-oauth2/</link>
    <description>Recent content on Light OAuth2 - OAuth2 Serivces based on light-4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 19 Sep 2017 21:07:30 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-oauth2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refresh Token</title>
      <link>https://networknt.github.io/light-oauth2/services/refresh-token/</link>
      <pubDate>Tue, 19 Sep 2017 21:07:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/refresh-token/</guid>
      <description>Refresh Token Refresh Token is issued in Authorization Code Grant and Resource Owner Password Credentials Grant along with access token. Also, for maximum security, a refresh token is issued every time the old refresh token is used to renew an access token.
This service is listening to port number 6886.
Here is the specification
swagger: &#39;2.0&#39; info: version: &amp;quot;1.0.0&amp;quot; title: OAuth2 Refresh Token Management description: OAuth2 refresh token management microservices endpoints.</description>
    </item>
    
    <item>
      <title>Key Distribution</title>
      <link>https://networknt.github.io/light-oauth2/services/key/</link>
      <pubDate>Tue, 19 Sep 2017 21:06:21 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/key/</guid>
      <description>Key In microservices architecture, the traditional way of copying public key certificates to hosts of services is not working. With container orchestration tool like Kubernetes old containers can be shutdown and new container can be started at anytime. So the push certificates to services has to be changed to pull certificates from OAuth2 server instead. This service is designed to pull public key certificate based on keyId that is in the JWT token header.</description>
    </item>
    
    <item>
      <title>User Management</title>
      <link>https://networknt.github.io/light-oauth2/services/user/</link>
      <pubDate>Tue, 19 Sep 2017 21:05:10 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/user/</guid>
      <description>User This is a service for user registration and management. The OAuth server supports integration with other user management system like active directory or LDAP. However, for most enterprise customers, their customer information normally will be in database. This service provides a database table for user management and several endpoints to manage users.
In OAuth 2.0 specification, user is normally called resource owner.
User Type Currently there are three user types to support.</description>
    </item>
    
    <item>
      <title>Client Registration</title>
      <link>https://networknt.github.io/light-oauth2/services/client/</link>
      <pubDate>Tue, 19 Sep 2017 21:03:44 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/client/</guid>
      <description>Client Before initiating the protocol, the client registers with the authorization server. The means through which the client registers with the authorization server are not defined in OAuth 2.0 specification.
As an extension, we have implemented client registration/on-boarding as a micro service that exposes several endpoints.
Before digging into the details of implementation, let&amp;rsquo;s clarify some concepts about client.
Client Type OAuth defines two client types, based on their ability to authenticate securely with the authorization server (i.</description>
    </item>
    
    <item>
      <title>Service Registration</title>
      <link>https://networknt.github.io/light-oauth2/services/service/</link>
      <pubDate>Tue, 19 Sep 2017 21:02:27 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/service/</guid>
      <description>Service Every micro service or API needs to register itself to OAuth2 server in order to control who can access it. During the registration/on-boarding, a list of scopes defined in the OpenAPI specification should be populated as well. This list of scopes will be used for client to register scopes in order to access this particular service or API.
This service has several endpoints and listening to port 6883.</description>
    </item>
    
    <item>
      <title>Token Endpoint</title>
      <link>https://networknt.github.io/light-oauth2/services/token/</link>
      <pubDate>Tue, 19 Sep 2017 21:01:03 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/token/</guid>
      <description>Token This is a post endpoint to get JSON web tokens. Currently, it support three different grant types: authorization_code, client_credentials and password.
Authorization Code Grant Type Request The client makes a request to the token endpoint by sending the following parameters using the &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format.
 grant_type   REQUIRED. Value MUST be set to &amp;ldquo;authorization_code&amp;rdquo;.
 code   REQUIRED. The authorization code received from the authorization server.</description>
    </item>
    
    <item>
      <title>Authorization Code</title>
      <link>https://networknt.github.io/light-oauth2/services/code/</link>
      <pubDate>Tue, 19 Sep 2017 20:57:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/code/</guid>
      <description>Code This is a service that support authorization code grant type. The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients. Since this is a redirection-based flow, the client must be capable of interacting with the resource owner&amp;rsquo;s user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.
The service accepts user credentials and redirects back authorization code with redirect URI defined in the client registration or overwritten it by passing in a redirect URI in the request.</description>
    </item>
    
    <item>
      <title>OpenID Connect</title>
      <link>https://networknt.github.io/light-oauth2/services/openid/</link>
      <pubDate>Sat, 24 Jun 2017 08:44:23 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/openid/</guid>
      <description>References Full-Scratch Implementor of OAuth and OpenID Connect Talks About Findings</description>
    </item>
    
    <item>
      <title>Proof key for code exchange (PKCE)</title>
      <link>https://networknt.github.io/light-oauth2/services/pkce/</link>
      <pubDate>Sat, 24 Jun 2017 08:05:13 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/pkce/</guid>
      <description>Public OAuth clients that use the code grant and run on smartphones are susceptible to a code interception attack. Fortunately, this attack can be successfully prevented by establishing a secure binding between the authorisation request and the subsequent token request.
The OAuth work group devised an official mini extension of the protocol for that, called Proof Key for Code Exchange (PKCE) and published in September 2015 as RFC 7636. It is a countermeasure against the authorization code interception attack.</description>
    </item>
    
    <item>
      <title>Custom Grant Type in Enterprise Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/custom/</link>
      <pubDate>Sat, 24 Jun 2017 08:04:57 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/custom/</guid>
      <description>There are four standard grant types in OAuth2 spec and it outlines how to add custom grant types. With more and more uses asking for some special integration with our OAuth2 services, we are adding the following custom grant types. These are non-standard and will only be used with a special client_type called trusted in most of the cases.
client_authenticated_user This particular grant type is to address the following use cases.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://networknt.github.io/light-oauth2/reference/</link>
      <pubDate>Sun, 12 Feb 2017 19:36:42 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/reference/</guid>
      <description>Specifications  OpenID Connect Core 1.0 incorporating errata set 1 - OpenID Connect core OAuth 2.0 Multiple Response Type Encoding Practices - OpenID Connect multiple response types OAuth 2.0 Form Post Response Mode - Form post response mode OAuth 2.0 Threat Model and Security Considerations - Information on all sorts of threats in OAuth 2.0 specification.  Articles and Blogs  OAuth 2 and Fragment encoding - Some browsers changed behavior for fragment encoding and the impact on OAuth 2.</description>
    </item>
    
    <item>
      <title>How to generate long lived token</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/longlive/</link>
      <pubDate>Sun, 08 Jan 2017 16:15:49 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/longlive/</guid>
      <description>In normal case, your clients or testing tools should integrate with OAuth authorization server to get tokens during runtime; however, for manual testing, it is very inconvenient to get access token every 10 minutes. To make tester&amp;rsquo;s jobs easier, you can generate a long lived token for dev testing from a tool in Light-Java framework.
The light-oauth2 contains two testing key pairs for testing only. Both private keys and public key certificates can be found in resources/config/oauth folder.</description>
    </item>
    
    <item>
      <title>keytool</title>
      <link>https://networknt.github.io/light-oauth2/tools/keytool/</link>
      <pubDate>Sun, 08 Jan 2017 15:50:36 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/keytool/</guid>
      <description>In production environment, it is recommended to buy certificates to sign the JWT token; however, most people will use self-signed certificate on non-production environment. Java Keytool is a very convenient tool to generate key pair and public key certificate.
Here is an example to generate key pair and public key certificate in two steps.
keytool -genkey -keyalg RSA -alias selfsigned -keystore primary.jks -storepass password -validity 3600 -keysize 2048 keytool -export -alias selfsigned -keystore primary.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/</guid>
      <description>There are two editions of OAuth2 servers available and each edition has different set of services and endpoints. For Enterprise edition, there are seven services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.
The following links documented services and endpoints served by each service for two editions and some other useful guides.
How to use enterprise edition
How to user provider edition</description>
    </item>
    
    <item>
      <title>provider</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/provider/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:20 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/provider/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enterprise Edition Tutorial</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:13 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/enterprise/</guid>
      <description>Note: the following steps use Oracle database as an example. MySQL and Postgres should be the same by choosing docker-compose-mysql.yml or docker-compose-postgres.yml when starting docker-compose.
Start Services In production mode, all services will have docker images downloaded from hub.docker.com or private docker hub within your organization. And Kubernetes or other docker orchestration tools will be used to manage containers.
To help use to understand how each service work and enable user to modify services, the first section of this tutorial will focus on development mode which will build these services and dockerize them.</description>
    </item>
    
    <item>
      <title>OAuth2 Introduction</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/introduction/</link>
      <pubDate>Sun, 01 Jan 2017 10:12:55 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/introduction/</guid>
      <description>OAuth 2 is an authorization framework that enables applications to obtain limited access to user&amp;rsquo;s resources on an HTTP service - normally exposed as a REST API. It works by delegating user authentication to an authorization service which contains all sorts of login service providers like LDAP for employees and database for customers.
OAuth 2 provides authorization flows for the following types of application to application communication:
 Web server to API Standalone application to API API to API  This informational guide is geared towards application developers, and provides an overview of OAuth 2 roles, authorization grant types, use cases, and flows.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://networknt.github.io/light-oauth2/services/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:52 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/</guid>
      <description>There are two editions of OAuth2 servers available and each edition has different set of services and endpoints. For Enterprise edition, there are 7 services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.
The following links documented services and endpoints served by each service for two editions.
Enterprise edition
Provider edition
Custom grant type
PKCE
OpenID Connect</description>
    </item>
    
    <item>
      <title>Provider Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/provider/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/provider/</guid>
      <description>To be implemented.</description>
    </item>
    
    <item>
      <title>Enterprise Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/enterprise/</guid>
      <description>There are 7 standard services that cover standard OAuth2 grant flows and extended features like service on-boarding, client on-boarding, user management and public key certificate distribution.
This document only describe the features and processes of each service. Please refer to tutorial on how to access these services.
 Code - Login to OAuth2 and get authorization code Token - Token endpoint of OAuth2 provider Service - Service registration endpoint Client - Client registration endpoint User - User management endpoint Key - Public key certificate distribution Refresh Token - Refresh token service  </description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-oauth2/tools/</link>
      <pubDate>Sun, 01 Jan 2017 09:36:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/</guid>
      <description>The following tools can be used to test microservices and generate key pairs.
curl
postman
keytool</description>
    </item>
    
    <item>
      <title>postman</title>
      <link>https://networknt.github.io/light-oauth2/tools/postman/</link>
      <pubDate>Sun, 01 Jan 2017 09:35:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/postman/</guid>
      <description></description>
    </item>
    
    <item>
      <title>curl</title>
      <link>https://networknt.github.io/light-oauth2/tools/curl/</link>
      <pubDate>Sun, 01 Jan 2017 09:30:53 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/curl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/</link>
      <pubDate>Sat, 31 Dec 2016 21:20:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/</guid>
      <description>OAuth2 Introduction If you are new to OAuth2, please read this introduction document to get familiar with the concept.
Select the Right Edition Enterprise Edition A microservices and database based OAuth2 server that have 7 services and numeric endpoints to support user login, access token, user registration, service registration, client registration and public key certificate distribution. It can support millions users and thousands of clients and services with scopes. It should be easily handle thousands of concurrent users per instance and each microservice can be scaled individually.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-oauth2/architecture/</link>
      <pubDate>Sat, 31 Dec 2016 21:16:50 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/architecture/</guid>
      <description>Microservices It is built on top of Light-Java framework as 7 microservices and each serivce has several endpoints to support user login, access token retrieval, user registration, service registration, client registration and public key certificate distribution. It can support millions users and thousands of clients and services with scopes. It should be easily handle thousands of concurrent users per instance and each service can be scaled individually if necessary.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-oauth2/</link>
      <pubDate>Sat, 31 Dec 2016 20:29:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/</guid>
      <description>Why this OAuth 2.0 Authorization Server Fast and small memory footprint to lower production cost. The Development Edition can support 60000 user login and get authorization code redirect and can generate 700 access tokens per second on my laptop.
It has 7 microservices connected with in-memory data grid and each service can be scaled individually.
More secure than other implementations OAuth 2.0 is just a specification and a lot of details are in the individual implementation.</description>
    </item>
    
  </channel>
</rss>